/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles,
 * allowing users to manage their own profile data. Content is publicly readable,
 * but only authorized users can create, update, or delete content items.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /content/{contentId}: Stores content items (movies, web series, dramas).
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Content is publicly readable.
 * - Only authenticated users are allowed to manage content.
 *
 * Denormalization for Authorization:
 *  N/A - Current rules do not depend on denormalized data. If more complex
 *  authorization schemes are required, consider adding fields like 'ownerId'
 *  to documents for faster rule evaluation.
 *
 * Structural Segregation:
 *  The application uses separate collections for user profiles and content.
 *  User profiles are stored under /users/{userId}, ensuring that user-specific
 *  data is kept separate from public content in the /content/{contentId} collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *          request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' can read their own profile.
     *          request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their own profile.
     *          request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete their own profile.
     *          request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *       request.auth.uid == 'user456', resource.data.id == 'user123'
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     *       request.auth.uid == 'user456'
     * @deny (update) User with ID 'user456' cannot update the profile of 'user123'.
     *       request.auth.uid == 'user456'
     * @deny (delete) User with ID 'user456' cannot delete the profile of 'user123'.
     *       request.auth.uid == 'user456'
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email is string;
      allow update: if isOwner(userId) && resource.data.email == request.resource.data.email;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to content documents.
     * @path /content/{contentId}
     * @allow (get) Any user can read content.
     *          true
     * @allow (list) Any user can list content.
     *          true
     * @allow (create) Authenticated user can create content.
     *          request.auth.uid != null
     * @allow (update) Authenticated user can update content.
     *          request.auth.uid != null
     * @allow (delete) Authenticated user can delete content.
     *          request.auth.uid != null
     * @deny (create) Unauthenticated user cannot create content.
     *          request.auth.uid == null
     * @deny (update) Unauthenticated user cannot update content.
     *          request.auth.uid == null
     * @deny (delete) Unauthenticated user cannot delete content.
     *          request.auth.uid == null
     * @principle Allows public read access to content, restricts writes to authenticated users.
     */
    match /content/{contentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}